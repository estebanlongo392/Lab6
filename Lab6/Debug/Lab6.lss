
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011a  0080011a  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000882  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}


void initUART9600(void){
	
	cli ();
  a6:	f8 94       	cli
	//PORTB COMO SALIDAS
	DDRB = 0b11111111;   // Todo como salidas
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
  ac:	15 b8       	out	0x05, r1	; 5
	
	//RX como entrada y TX como salida
	DDRD &= ~(1<<DDD0);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A = 0;
  ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Configuracion del UCSR0B: DONDE ISR de recepcion, habilitamos RX y TX
	UCSR0B = 0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)| (1<<RXEN0)| (1<<TXEN0);
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24

	//Configuracion UCSR0C: Asincrono, Paridad: none, 1 bit de Stop, Data bits = 8 bits 
	UCSR0C = 0;
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
 
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //8 BITS
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
 
	//Configuracion de velocidad de Baudrate de 9600
	UBRR0 = 103;
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <writeTextUART>:
 
 }

 void writeTextUART(char* Texto){
  e4:	ac 01       	movw	r20, r24
 
 uint8_t i;
 for (i=0; Texto[i] !='\0'; i++){			//Empieza en 0 y va hasta el valor que tenga "Texto" en la posicion "i" cuando ya sea nulo para poder aumentar dicho valor
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <writeTextUART+0x14>
 while (!(UCSR0A & (1<<UDRE0)));		//Se espera a que se vacie el buffer del UDR, si esta vacio se carga el texto
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <writeTextUART+0x6>
 UDR0 = Texto[i];						//Avanzar al siguiente caracter
  f2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 }

 void writeTextUART(char* Texto){
 
 uint8_t i;
 for (i=0; Texto[i] !='\0'; i++){			//Empieza en 0 y va hasta el valor que tenga "Texto" en la posicion "i" cuando ya sea nulo para poder aumentar dicho valor
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	fa 01       	movw	r30, r20
  fa:	e2 0f       	add	r30, r18
  fc:	f1 1d       	adc	r31, r1
  fe:	30 81       	ld	r19, Z
 100:	31 11       	cpse	r19, r1
 102:	f3 cf       	rjmp	.-26     	; 0xea <writeTextUART+0x6>
 while (!(UCSR0A & (1<<UDRE0)));		//Se espera a que se vacie el buffer del UDR, si esta vacio se carga el texto
 UDR0 = Texto[i];						//Avanzar al siguiente caracter
 }
 }
 104:	08 95       	ret

00000106 <writeUART>:


 void writeUART(char Caracter){
 
 while (!(UCSR0A & (1<<UDRE0)));
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <writeUART>
 UDR0 = Caracter;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <readUART>:
 }

 void readUART(uint8_t receivedChar) {
 switch (receivedChar) {
 114:	82 33       	cpi	r24, 0x32	; 50
 116:	b1 f0       	breq	.+44     	; 0x144 <readUART+0x30>
 118:	28 f4       	brcc	.+10     	; 0x124 <readUART+0x10>
 11a:	80 33       	cpi	r24, 0x30	; 48
 11c:	49 f0       	breq	.+18     	; 0x130 <readUART+0x1c>
 11e:	81 33       	cpi	r24, 0x31	; 49
 120:	61 f0       	breq	.+24     	; 0x13a <readUART+0x26>
 122:	24 c0       	rjmp	.+72     	; 0x16c <readUART+0x58>
 124:	84 33       	cpi	r24, 0x34	; 52
 126:	c1 f0       	breq	.+48     	; 0x158 <readUART+0x44>
 128:	90 f0       	brcs	.+36     	; 0x14e <readUART+0x3a>
 12a:	85 33       	cpi	r24, 0x35	; 53
 12c:	d1 f0       	breq	.+52     	; 0x162 <readUART+0x4e>
 12e:	1e c0       	rjmp	.+60     	; 0x16c <readUART+0x58>
 case '0':
 PORTB = 0;
 130:	15 b8       	out	0x05, r1	; 5
 PORTB |= (1 << PORTB0);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	81 60       	ori	r24, 0x01	; 1
 136:	85 b9       	out	0x05, r24	; 5

		break;
 138:	08 95       	ret
		case '1':
		PORTB = 0;
 13a:	15 b8       	out	0x05, r1	; 5
		PORTB |= (1 << PORTB1);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	85 b9       	out	0x05, r24	; 5
		break;
 142:	08 95       	ret
		case '2':
		PORTB = 0;
 144:	15 b8       	out	0x05, r1	; 5
		PORTB |= (1 << PORTB2);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	85 b9       	out	0x05, r24	; 5
		break;
 14c:	08 95       	ret
		case '3':
		PORTB = 0;
 14e:	15 b8       	out	0x05, r1	; 5
		PORTB |= (1 << PORTB3);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	88 60       	ori	r24, 0x08	; 8
 154:	85 b9       	out	0x05, r24	; 5
		break;
 156:	08 95       	ret
		case '4':
		PORTB = 0;
 158:	15 b8       	out	0x05, r1	; 5
		PORTB |= (1 << PORTB4);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	85 b9       	out	0x05, r24	; 5
		break;
 160:	08 95       	ret
		case '5':
		PORTB = 0;
 162:	15 b8       	out	0x05, r1	; 5
		PORTB |= (1 << PORTB5);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	80 62       	ori	r24, 0x20	; 32
 168:	85 b9       	out	0x05, r24	; 5
		break;
 16a:	08 95       	ret
		default:
		PORTB = 0xFF;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	81 ee       	ldi	r24, 0xE1	; 225
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <readUART+0x62>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <readUART+0x6c>
 180:	00 00       	nop
		_delay_ms(100);
		PORTB = 0x00;
 182:	15 b8       	out	0x05, r1	; 5
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	81 ee       	ldi	r24, 0xE1	; 225
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <readUART+0x76>
 192:	00 c0       	rjmp	.+0      	; 0x194 <readUART+0x80>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <main>:
volatile uint8_t bufferTX;


int main(void)
{
	initUART9600();
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
 19c:	78 94       	sei
	
	
	writeTextUART("Hola mundo AHHHHHHHHH =) ");
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 72 00 	call	0xe4	; 0xe4 <writeTextUART>
	writeUART(10);	//New line
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>
	writeUART(13);	//Retorno
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	0e 94 83 00 	call	0x106	; 0x106 <writeUART>

	while (1)
{
	if (bufferTX != 0) {
 1b2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1b6:	88 23       	and	r24, r24
 1b8:	e1 f3       	breq	.-8      	; 0x1b2 <main+0x1a>
		readUART(bufferTX);
 1ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1be:	0e 94 8a 00 	call	0x114	; 0x114 <readUART>
		bufferTX = 0;
 1c2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 1c6:	f5 cf       	rjmp	.-22     	; 0x1b2 <main+0x1a>

000001c8 <__vector_18>:
		break;
	}
}

// INTERRUPCION DE USART
ISR (USART_RX_vect){
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	
	bufferTX = UDR0;
 1ea:	e6 ec       	ldi	r30, 0xC6	; 198
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
	UDR0 = bufferTX;
 1f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1f8:	80 83       	st	Z, r24
	readUART(UDR0);
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 8a 00 	call	0x114	; 0x114 <readUART>
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
